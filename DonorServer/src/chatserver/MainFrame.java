package chatserver;

import java.net.*;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import java.util.TreeSet;
import java.util.Vector;

public class MainFrame extends javax.swing.JFrame {

    ServerSocket ss;
    ConnectionManager manager;
    TreeSet<String> userList = new TreeSet<String>();
    Vector<MySocket> socketList = new Vector<MySocket>();

    public MainFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Welcome to Donor Server");

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Start Server");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Stop Server");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(55, 55, 55)
                .addComponent(jButton1)
                .addGap(33, 33, 33)
                .addComponent(jButton2)
                .addContainerGap(122, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            ss = new ServerSocket(12345);
            manager = new ConnectionManager();
            manager.setDaemon(true);
            manager.start();
            JOptionPane.showMessageDialog(this, "Server Started Successfully");
            jButton1.setEnabled(false);
            jButton2.setEnabled(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Server could not be Started", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            ss.close();
            manager.stop();
            JOptionPane.showMessageDialog(this, "Server Stopped Successfully");
            jButton2.setEnabled(false);
            jButton1.setEnabled(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Server could not be Stopped", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    class ConnectionManager extends Thread {

        public void run() {
            while (true) {
                try {
                    Socket s = ss.accept();
                    MySocket ms = new MySocket(s);
                    new ClientHandler(ms).start();
                } catch (Exception ex) {
                }
            }
        }
    }

    class ClientHandler extends Thread {

        MySocket ms;

        ClientHandler(MySocket s) {
            ms = s;
        }

        public void run() {
            try {
                String str = ms.readLine();
                if (str.equals("0000")) {
                    ms.println("0000");
                    ms.close();
                } else if (str.equals("1111")) {
                    String data = ms.readLine();
                    StringTokenizer st = new StringTokenizer(data, "|");
                    String userId = st.nextToken();
                    String passwd = st.nextToken();
                    String name = st.nextToken();
                    String email = st.nextToken();
                    String mno = st.nextToken();
                    String bloodGroup = st.nextToken();
                    String location = st.nextToken();
                    if (DBManager.isUserIdAvailable(userId) == true) {
                        DBManager.registerUser(userId, passwd, name, email, mno,bloodGroup,location);
                        ms.println("1");
                    } else {
                        ms.println("0");
                    }
                    ms.close();
                } else if (str.equals("2222")) {
                    String data = ms.readLine();
                    StringTokenizer st = new StringTokenizer(data, "|");
                    String userId = st.nextToken();
                    String passwd = st.nextToken();
                    if (userList.add(userId) == false) {
                        ms.println("2");
                        ms.close();
                    } else {
                        if (DBManager.authenticateUser(userId, passwd) == true) {
                            ms.println("1");
                            new ChatHandler(userId, ms).start();
                        } else {
                            ms.println("0");
                            ms.close();
                        }
                    }
                }
            } catch (Exception ex) {
            }
        }
    }

    class ChatHandler extends Thread {

        String userId;
        MySocket ms;

        ChatHandler(String id, MySocket s) {
            userId = id;
            ms = s;
        }

        public void run() {
            socketList.add(ms);
            String listOfUsers = getUserList();
            try {
                ms.println(listOfUsers);
                broadcast("0000|"+userId);
                while (true) {
                    String str = ms.readLine();
                    if (str.equals("closing")) {
                        break;
                    }
                    broadcast(userId + " : " + str);
                }
                ms.close();
                socketList.remove(ms);
                userList.remove(userId);
                broadcast("1111|"+userId);
            } catch (Exception e) {
            }
        }

        public String getUserList(){
            String str = "";
            for(String temp : userList){
                str += temp+"|";
            }
            return str;
        }

        public void broadcast(String str) throws Exception {
            for (MySocket s : socketList) {
                s.println(str);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
